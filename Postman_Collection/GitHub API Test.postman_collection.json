{
	"info": {
		"_postman_id": "ba43ecf0-7aaa-4518-9805-349328bd715f",
		"name": "GitHub API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28674250"
	},
	"item": [
		{
			"name": "Search Repositories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"",
							"pm.environment.set(\"repositories\", JSON.stringify(response.items));",
							"",
							"console.log(\"Repositories extracted:\", response.items);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Authorization}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/search/repositories?q=machine learning&per_page=5&sort=stars&order=desc",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"search",
						"repositories"
					],
					"query": [
						{
							"key": "q",
							"value": "machine learning"
						},
						{
							"key": "per_page",
							"value": "5"
						},
						{
							"key": "sort",
							"value": "stars"
						},
						{
							"key": "order",
							"value": "desc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List Commits",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const repositories = JSON.parse(pm.environment.get(\"repositories\") || \"[]\");",
							"const currentIndex = pm.environment.get(\"currentIndex\") || 0;",
							"",
							"if (!repositories || repositories.length === 0) {",
							"    console.error(\"Repositories not found. Check the 'repositories' variable.\");",
							"    postman.setNextRequest(null);",
							"}",
							"",
							"if (currentIndex >= repositories.length) {",
							"    console.error(\"Current index is out of bounds.\");",
							"    postman.setNextRequest(null);",
							"}",
							"",
							"const repo = repositories[currentIndex];",
							"if (!repo) {",
							"    console.error(\"Repository is undefined.\");",
							"    postman.setNextRequest(null);",
							"} else {",
							"    pm.environment.set(\"owner\", repo.owner.login);",
							"    pm.environment.set(\"repo\", repo.name);",
							"",
							"    console.log(`Fetching commits for: ${repo.full_name}`);",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Authorization}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/repos/{owner}/{repo}/commits",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"repos",
						"{owner}",
						"{repo}",
						"commits"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Repository Contents",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"",
							"console.log(`Contents of ${pm.environment.get(\"repo\")}:`, response);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Authorization}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/repos/{owner}/{repo}/contents",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"repos",
						"{owner}",
						"{repo}",
						"contents"
					]
				}
			},
			"response": []
		}
	]
}